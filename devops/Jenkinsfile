@Library("jenkins-shared-library")_

env.MAVEN_CENTRAL="${MAVEN_CENTRAL_COMMON}"
env.MAPR_CENTRAL="${MAPR_CENTRAL_COMMON}"
env.MAPR_RELEASES_REPO="${MAPR_RELEASES_REPO_COMMON}"
env.MAPR_SNAPSHOTS_REPO="${MAPR_SNAPSHOTS_REPO_COMMON}"
env.MAPR_MAVEN_REPO="${MAPR_SNAPSHOTS_REPO_COMMON}"

ARTIFACTORY_SERVER=''
env.REPOSITORY_NAME=''
env.GIT_REPO_URL=''
env.GIT_SHORT_COMMIT_SHA=''
env.CURRENT_BUILD_TAG=''
env.BUILD_BY_TAG=false

env.ARTIFACTORY_PATH_RPM=''
env.ARTIFACTORY_PATH_DEB=''
env.ID=''
env.MAKEFILE_ARGS=''
env.PROJECT=''
REPOSITORY_ID=''
MAKEFILE_ARG_BRANCH_NAME = " HIVE_BRANCH_NAME"
CHECKSTYLE_CONDITION = true
env.PR_ERROR = ''
env.TARGET_ERROR = ''
env.COMMIT_MESSAGE = ''

pipeline {
  agent none
  triggers {
    pollSCM 'H/5 * * * *'
  }
  options {
    skipDefaultCheckout()
    disableConcurrentBuilds()
    timestamps()
  }
  parameters {
    choice(name: 'BUILD_TYPE', choices: ['Dev','EBF','Release'], description: 'default - Dev. EBF and Release args you can use only in release branches')
    string(name: 'MAKEFILE_ENV_VARS', defaultValue: '', description: 'Variables you can pass to makefile (command will be: make {THIS VAR} {project-name}). Please DO NOT put component_branch_name')
  }
  stages {
    stage("Setup settings and variables") {
      agent {label "redhat8"}
      steps {
        script {
          ARTIFACTORY_SERVER = Artifactory.server 'artifactory.devops.lab'
          //MAKEFILE_ARG_BRANCH_NAME will use for makefile only for release/EBF branches
          initVariables(params.BUILD_TYPE, MAKEFILE_ARG_BRANCH_NAME)
          if(params.BUILD_TYPE=="Dev") {
            REPOSITORY_ID='mapr-snapshots'
          }else {
            REPOSITORY_ID='mapr-releases'
          }
        }
      }
    }
    stage ("Checkstyle violations reports") {
     agent {label "redhat8"}
     tools {
             go 'Golang'
         }
     when {
        anyOf {
            expression { env.BRANCH_NAME ==~ /PR-.*/}
            expression { env.BRANCH_NAME ==~ /.*branch.*/ }
        }
     }
     stages {
        stage ("Generation of Checkstyle violations reports") {
            steps {
                script {
                    DOCKER_IMAGE = 'dfdkr.mip.storage.hpecorp.net/ubuntu14-java8-build:latest'
                    checkstyle.generateCheckstyleReport(DOCKER_IMAGE)
                }
            }
        }
        stage ("Pull target branch Checkstyle Violations Report") {
            when {
              expression { env.BRANCH_NAME ==~ /PR-.*/}
            }
            steps {
                script {
                    // Try catch used only for first non-existed report
                    try {
                        checkstyle.pullTargetCheckstyleReport(ARTIFACTORY_SERVER)
                    } catch (err) {
                        echo err.getMessage()
                    }
                }
            }
        }
        stage ("Compare Target and PR branch Checkstyle Violations Reports") {
            when {
              expression { env.BRANCH_NAME ==~ /PR-.*/}
            }
            steps {
                script {
                    // Try catch used only for first non-existed report
                    try {
                        checkstyle.compareCheckstyleReports()
                    } catch (err) {
                        echo err.getMessage()
                    }
                }
            }
        }
        stage ("Push Checkstyle Violations Reports to Artifactory") {
          when {
            expression { env.BRANCH_NAME ==~ /.*branch.*/ }
          }
          stages {
            stage("Upload to Artifactory") {
              steps{
                script {
                    checkstyle.pushCheckstyleReport(ARTIFACTORY_SERVER)
                }
              }
            }
          }
        }
     }
    }
    stage ("Run Hive JUnit tests") {
      agent {label "redhat8"}
      when {
        allOf {
           expression { CHECKSTYLE_CONDITION == true && env.BRANCH_NAME ==~ /PR-.*/ }
           expression { !(env.COMMIT_MESSAGE ==~ /.*prskiptest.*/) }
        }
      }
      steps {
        script {
            configFileProvider([configFile(fileId: 'maven_settings', variable: 'mvn_settings')]) {
              checkout scm
              sh "cat ${env.mvn_settings} > settings.xml"
            }
            docker.image("dfdkr.mip.storage.hpecorp.net/ubuntu16-java11-gcc7").inside (
            "-e MAPR_MIRROR=${MAPR_MIRROR} \
            -e MAPR_CENTRAL=${MAPR_CENTRAL} \
            -e MAVEN_CENTRAL=${MAVEN_CENTRAL} \
            -e MAPR_MAVEN_REPO=${MAPR_MAVEN_REPO} \
            -e BUILD_NUMBER=${ID}.${BUILD_NUMBER} \
            -e MAPR_RELEASES_REPO=${MAPR_RELEASES_REPO} \
            -e MAPR_SNAPSHOTS_REPO=${MAPR_SNAPSHOTS_REPO} \
            -e REPOSITORY_ID=${REPOSITORY_ID} \
            -v /root/.m2:/root/.m2:rw \
            -v /root/yum-proxy.conf:/etc/yum.conf:ro \
            -v /root/apt-proxy.conf:/etc/apt/apt.conf.d/proxy.conf:ro \
            -v /root/.gradle/gradle.properties:/root/.gradle/gradle.properties:ro \
            -v /etc/profile.d/proxy.sh:/etc/profile.d/proxy.sh:ro \
            -v /etc/localtime:/etc/localtime:ro \
            -v /root/.ssh:/root/.ssh:rw \
            -v ${WORKSPACE}/settings.xml:/root/.m2/settings.xml:ro \
            -u root:root \
            -e USER=root") {
              sh """
                mvn clean test; \
              """
            }
        }
      }
    }

    stage ("Main CI process") {
      when {
        anyOf {
          expression { env.BRANCH_NAME ==~ /.*branch.*/}
          expression {
            env.COMMIT_MESSAGE ==~ /.*prbuild.*/ && changeRequest (target: "^branch-.+-mapr(\$|.+)", comparator: "REGEXP")
          }
        }
      }
      parallel {
        stage("Ubuntu build") {
          agent {label "ubuntu"}
          stages {
            stage("Checkout") {
              steps {
                script {
                  checkout scm
                }
              }
            }

            stage("Build") {
              steps {
                script {
                  configFileProvider([configFile(fileId: 'maven_settings', variable: 'mvn_settings')]) {
                    sh "cat ${env.mvn_settings} > settings.xml"
                  }
                  docker.image("dfdkr.mip.storage.hpecorp.net/ubuntu16-java11-gcc7:maven363").inside (
                  "-e MAPR_MIRROR=${MAPR_MIRROR} \
                  -e MAPR_CENTRAL=${MAPR_CENTRAL} \
                  -e MAVEN_CENTRAL=${MAVEN_CENTRAL} \
                  -e MAPR_MAVEN_REPO=${MAPR_MAVEN_REPO} \
                  -e BUILD_NUMBER=${ID}.${BUILD_NUMBER} \
                  -e MAPR_RELEASES_REPO=${MAPR_RELEASES_REPO} \
                  -e MAPR_SNAPSHOTS_REPO=${MAPR_SNAPSHOTS_REPO} \
                  -e REPOSITORY_ID=${REPOSITORY_ID} \
                  -v /root/.m2:/root/.m2:rw \
                  -v /root/yum-proxy.conf:/etc/yum.conf:ro \
                  -v /etc/hosts:/etc/hosts:ro \
                  -v /root/apt-proxy.conf:/etc/apt/apt.conf.d/proxy.conf:ro \
                  -v /root/.gradle/gradle.properties:/root/.gradle/gradle.properties:ro \
                  -v /etc/profile.d/proxy.sh:/etc/profile.d/proxy.sh:ro \
                  -v /etc/localtime:/etc/localtime:ro \
                  -v /root/.ssh:/root/.ssh:rw \
                  -v ${WORKSPACE}/settings.xml:/root/.m2/settings.xml:ro") {
                    sh """
                      rm -rf ${PROJECT}; git clone git@github.com:mapr/private-pkg.git ${PROJECT}; \
                      cd ${PROJECT}; \
                      git checkout MEP-9.2.1 ; \
                      make ${PROJECT} TIMESTAMP=${ID} ${MAKEFILE_ARGS} ; \
                      make mapr-hiveserver2-${COMPONENT_VERSION} ${MAKEFILE_ARGS} TIMESTAMP=${ID}; \
                      make mapr-hivemetastore-${COMPONENT_VERSION} ${MAKEFILE_ARGS} TIMESTAMP=${ID}; \
                      make mapr-hivewebhcat-${COMPONENT_VERSION} ${MAKEFILE_ARGS} TIMESTAMP=${ID}; \
                    """
                  }
                }
              }
            }

            stage("Upload to Artifactory") {
              steps{
                script {
                  from = "${WORKSPACE}/${env.PROJECT}/dist/*"
                  to = "${env.ARTIFACTORY_PATH_DEB}"
                  props = "deb.distribution=binary;deb.component=trusty;deb.architecture=all;release=${params.BUILD_TYPE}"
                  artifactory.uploadArtifactsAndBuildInfo(ARTIFACTORY_SERVER, from, to, props)
                }
              }
            }
          }
        }

        stage("Redhat build") {
          agent { label "redhat8" }
          stages {
            stage("Checkout") {
              steps {
                script {
                  checkout scm
                }
              }
            }

            stage("Build") {
              steps {
                script {
                  configFileProvider([configFile(fileId: 'maven_settings', variable: 'mvn_settings')]) {
                    sh "cat ${env.mvn_settings} > settings.xml"
                  }
                  docker.image("dfdkr.mip.storage.hpecorp.net/centos8-java11-gcc8:maven363").inside (
                  "-e MAPR_MIRROR=${MAPR_MIRROR} \
                  -e MAPR_CENTRAL=${MAPR_CENTRAL} \
                  -e MAVEN_CENTRAL=${MAVEN_CENTRAL} \
                  -e MAPR_MAVEN_REPO=${MAPR_MAVEN_REPO} \
                  -e BUILD_NUMBER=${ID}.${BUILD_NUMBER} \
                  -e MAPR_RELEASES_REPO=${MAPR_RELEASES_REPO} \
                  -e MAPR_SNAPSHOTS_REPO=${MAPR_SNAPSHOTS_REPO} \
                  -e REPOSITORY_ID=${REPOSITORY_ID} \
                  -v /root/.m2:/root/.m2:rw \
                  -v /root/yum-proxy.conf:/etc/yum.conf:ro \
                  -v /etc/hosts:/etc/hosts:ro \
                  -v /root/apt-proxy.conf:/etc/apt/apt.conf.d/proxy.conf:ro \
                  -v /root/.gradle/gradle.properties:/root/.gradle/gradle.properties:ro \
                  -v /etc/profile.d/proxy.sh:/etc/profile.d/proxy.sh:ro \
                  -v /etc/localtime:/etc/localtime:ro \
                  -v /root/.ssh:/root/.ssh:rw \
                  -v ${WORKSPACE}/settings.xml:/root/.m2/settings.xml:ro") {
                    sh """
                      rm -rf ${PROJECT}; git clone git@github.com:mapr/private-pkg.git ${PROJECT}; \
                      cd ${PROJECT}; \
                      git checkout MEP-9.2.1 ; \
                      mvn --version ;\
                      make ${PROJECT} TIMESTAMP=${ID} ${MAKEFILE_ARGS} ; \
                      make mapr-hiveserver2-${COMPONENT_VERSION} ${MAKEFILE_ARGS} TIMESTAMP=${ID}; \
                      make mapr-hivemetastore-${COMPONENT_VERSION} ${MAKEFILE_ARGS} TIMESTAMP=${ID}; \
                      make mapr-hivewebhcat-${COMPONENT_VERSION} ${MAKEFILE_ARGS} TIMESTAMP=${ID}; \
                      make ${PROJECT}-deploy ${MAKEFILE_ARGS} TIMESTAMP=${ID} ; \
                    """
                  }
                }
              }
            }

            stage("RPM Sign") {
              steps {
                configFileProvider([configFile(fileId: 'rpmSignSh', variable: 'rpmSignSh')]) {
                  sh """
                  cat ${env.rpmSignSh} > rpm_sign.sh
                  chmod 765 rpm_sign.sh
                  ./rpm_sign.sh ${PROJECT}/dist
                  """
                }
              }
            }

            stage("Upload to Artifactory") {
              steps{
                script {
                  from = "${WORKSPACE}/${PROJECT}/dist/*"
                  to = "${ARTIFACTORY_PATH_RPM}"
                  props = "release=${params.BUILD_TYPE}"
                  artifactory.uploadArtifactsAndBuildInfo(ARTIFACTORY_SERVER, from, to, props)
                }
              }
            }
            stage("Whitesource scan") {
              steps {
                script {
                   ws.dockerScan()
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        postActions.failure()
      }
    }
    fixed {
      script {
        postActions.fixed()
      }
    }
    aborted {
      script {
        postActions.aborted()
      }
    }
    always {
      script {
        postActions.always()
      }
    }
  }
}
